#!/usr/bin/env python3.8


import numpy as np
from matplotlib import pyplot as plt
from matplotlib import animation, rc
import pandas as pd
import csv
from scipy import stats

# pour "jeje":
#file="/Users/jeje/Documents/Scolaire/M2/Projet_DFE/doi_10/All_data/data_microMA/dataset_microMA_MutH.csv"
# pour "nana":
file="../doi_10/All_data/data_microMA/dataset_microMA_MutH.csv"


from IPython.display import display, HTML, Video
CSS = """.output {align-items: center;}"""
HTML('<style>{}</style>'.format(CSS))


seuil_detection_fitness=0.005

def analyse_ligne(row): 
    res=[]
    for i in range(int(len(row)/3-1)):
        if(row[3*i+2]!="NA"):
            nouv=float(row[3*i+2].replace(",","."))
            if nouv<seuil_detection_fitness: nouv=0
            res+=[nouv]
        else:
            res+=[-1] # JJ   attention, pb à régler un jour!
    return res

def analyse_fichier(): # ressort [W_t pour tout t] pour le fichier lu
    wt_tot=[]
    wt_cur=[]
    with open("doi_10/All_data/data_microMA/dataset_microMA_MutH.csv", newline='') as csvfile:
        reader=csv.reader(csvfile,delimiter=';')
        nrow=0
        for row in reader:
            if(nrow>=2):
                wt_cur=analyse_ligne(row)
                wt_tot+=[wt_cur]
            nrow+=1
    return wt_tot


wt_real=np.array(analyse_fichier())
wt_real=wt_real[3:,:] # il faut supprimer les deux 1res.
with open('growthR_sim.npy', 'rb') as f:
    wt_sim = np.load(f)
with open('growthR_sim_noisy.npy', 'rb') as f:
    wt_sim_noise = np.load(f)


def normalise(wt_init): # renvoie Wt/W0 pour que toutes les cellules partent du même taux de croissance
    wt=wt_init.copy()
    for i in range(len(wt[0,:])):
        if(wt[0,i]!=0):
            wt[:,i]=wt[:,i]/wt[0,i]
        else:
             wt[:,i]=wt[:,i]*0
    return wt


xmin=0
xmax=0.14
ymin=0
ymax=250
nbreaks=200

tmax=1000



fig, ax = plt.subplots(figsize=(15,5))
line1,line2,=ax.plot([], [], [], [])
line = [line1,line2]
ax.set(xlabel = "Taux de croissance au temps t", ylabel = "Nombre d'individus")
ax.xaxis.label.set_fontsize(15)
ax.yaxis.label.set_fontsize(15)
plt.close()

def init():
    #ax.set_xlim(xmin,xmax)
    #ax.set_ylim(ymin,ymax)
    ax.grid(True)
    return line,



def get_y(x,growthR_cur,eps): # trouve la hauteur de la barre de l'histogramme correspondant à [x-eps/2,x+eps/2]
    y=[]
    i=0
    j=0
    for x_cur in x:
        while x_cur-growthR_cur[i]>eps/2 and i<len(growthR_cur)-1: i+=1
        while growthR_cur[j]-x_cur<eps/2 and j<len(growthR_cur)-1: j+=1
        y+=[j-i]
    return y

def sort_rows(w): # pour optimiser la construction de l'histogramme
    res=[]
    for row in w:
        res+=[np.sort(row)]
    return res


ax.legend(["Processus simulé","Processus observé"])

def update(frame): # met à jour l'affichage
    global wt_sim_provid,wt_real_provid
    x=np.linspace(xmin,xmax,nbreaks)
    y_sim=get_y(x,np.sort(wt_sim_provid[frame]),eps=(xmax-xmin)/nbreaks)
    y_real=get_y(x,np.sort(wt_real_provid[frame]),eps=(xmax-xmin)/nbreaks)
    line1.set_data(x,y_sim)
    line2.set_data(x,y_real)
    titre=""
    titre+="t="+str(int(frame*4/60))+"h"
    titre+="    (frame="+str(frame)+")"
    fig.suptitle(titre,size=20)
    return line,


def visualise(wt1,wt2):
    global wt_sim_provid,wt_real_provid
    wt_sim_provid=wt1
    wt_real_provid=wt2
    ani = animation.FuncAnimation(fig, update, 
                              frames=range(100), 
                              init_func=init, 
                              blit=False, 
                              repeat=False, 
                              interval=10)
    return ani



ani=visualise(wt_sim,wt_real)
plt.show()
